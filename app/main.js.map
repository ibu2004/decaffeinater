{"version":3,"sources":["main.js"],"names":["productionMode","installExtension","require","REACT_DEVELOPER_TOOLS","err","win","createWindow","width","height","loadURL","__dirname","webContents","openDevTools","on","then","name","console","log","catch","process","platform","quit","event","arg"],"mappings":";;AACA;;AACA;;;;;;AACA;;AAHA;AAKA,IAAIA,uBAAJ;AACA,IAAI;AACF,MAAMC,oBAAmBC,QAAQ,6BAAR,CAAzB;;AADE,iBAE8BA,QAAQ,6BAAR,CAF9B;AAAA,MAEKC,sBAFL,YAEKA,qBAFL;;AAGFH,mBAAiB,KAAjB;AACD,CAJD,CAIE,OAAMI,GAAN,EAAW;AACXJ,mBAAiB,IAAjB;AACD;AACD;;AAEA;AACA;AACA,IAAIK,YAAJ;;AAEA,SAASC,YAAT,GAAwB;AACtB;AACAD,QAAM,4BAAkB,EAAEE,OAAO,GAAT,EAAcC,QAAQ,GAAtB,EAAlB,CAAN;;AAEA;AACAH,MAAII,OAAJ,CAAY,YAAYC,SAAZ,GAAwB,aAApC;;AAEA;AACA,MAAIV,mBAAmB,KAAvB,EAA8B;AAC5BK,QAAIM,WAAJ,CAAgBC,YAAhB;AACD;;AAED;AACAP,MAAIQ,EAAJ,CAAO,QAAP,EAAiB,YAAY;AAC3B;AACA;AACA;AACAR,UAAM,IAAN;AACD,GALD;AAMD;;AAED;AACA;AACA;AACA,cAAIQ,EAAJ,CAAO,OAAP,EAAgBP,YAAhB;;AAEA;AACA;AACA;AACA,IAAIN,mBAAmB,KAAvB,EAA8B;AAC5B,MAAI;AACFC,qBAAiBE,qBAAjB,EACGW,IADH,CACQ,UAACC,IAAD;AAAA,aAAUC,QAAQC,GAAR,wBAAiCF,IAAjC,CAAV;AAAA,KADR,EAEGG,KAFH,CAES,UAACd,GAAD;AAAA,aAASY,QAAQC,GAAR,CAAY,qBAAZ,EAAmCb,GAAnC,CAAT;AAAA,KAFT;AAGD,GAJD,CAIE,OAAMA,GAAN,EAAW;AACX;AACD;AACF;;AAED;AACA;;AAEA;AACA,cAAIS,EAAJ,CAAO,mBAAP,EAA4B,YAAY;AACtC;AACA;AACA,MAAIM,QAAQC,QAAR,KAAqB,QAAzB,EAAmC;AACjC,kBAAIC,IAAJ;AACD;AACF,CAND;;AAQA,cAAIR,EAAJ,CAAO,UAAP,EAAmB,YAAY;AAC7B;AACA;AACA,MAAIR,QAAQ,IAAZ,EAAkB;AAChBC;AACD;AACF,CAND;;AAQA;AACA,kBAAQO,EAAR,CAAW,WAAX,EAAwB,UAACS,KAAD,EAAQC,GAAR,EAAgB;AACtC,0BAAYA,GAAZ,EAAiBJ,QAAQC,QAAzB;AACD,CAFD","file":"main.js","sourcesContent":["/* eslint-env node */\r\nimport {app, BrowserWindow, ipcMain} from \"electron\";\r\nimport killProcess from \"./killProc\";\r\n/* eslint-disable no-unused-vars */\r\n\r\nlet productionMode;\r\ntry {\r\n  const installExtension = require(\"electron-devtools-installer\");\r\n  const {REACT_DEVELOPER_TOOLS} = require(\"electron-devtools-installer\");\r\n  productionMode = false;\r\n} catch(err) {\r\n  productionMode = true;\r\n}\r\n/* eslint-enable no-unused-vars */\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet win;\r\n\r\nfunction createWindow() {\r\n  // Create the browser window.\r\n  win = new BrowserWindow({ width: 800, height: 600 });\r\n\r\n  // and load the index.html of the app.\r\n  win.loadURL(\"file://\" + __dirname + \"/index.html\");\r\n\r\n  // Open the DevTools.\r\n  if (productionMode === false) {\r\n    win.webContents.openDevTools();\r\n  }\r\n\r\n  // Emitted when the window is closed.\r\n  win.on(\"closed\", function () {\r\n    // Dereference the window object, usually you would store windows\r\n    // in an array if your app supports multi windows, this is the time\r\n    // when you should delete the corresponding element.\r\n    win = null;\r\n  });\r\n}\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on(\"ready\", createWindow);\r\n\r\n// Inject React developer tool extension.\r\n/* eslint-disable no-console */\r\n/* eslint-disable no-undef */\r\nif (productionMode === false) {\r\n  try {\r\n    installExtension(REACT_DEVELOPER_TOOLS)\r\n      .then((name) => console.log(`Added Extension:  ${name}`))\r\n      .catch((err) => console.log(\"An error occurred: \", err));\r\n  } catch(err) {\r\n    \"do nothing\";\r\n  }\r\n}\r\n\r\n/* eslint-enable no-console */\r\n/* eslint-enable no-undef */\r\n\r\n// Quit when all windows are closed.\r\napp.on(\"window-all-closed\", function () {\r\n  // On macOS it is common for applications and their menu bar\r\n  // to stay active until the user quits explicitly with Cmd + Q\r\n  if (process.platform !== \"darwin\") {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", function () {\r\n  // On macOS it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (win === null) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// In this file you can include the rest of your app's specific main process\r\nipcMain.on(\"iCanKill?\", (event, arg) => {\r\n  killProcess(arg, process.platform);\r\n});"]}