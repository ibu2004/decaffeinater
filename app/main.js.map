{"version":3,"sources":["main.js"],"names":["require","app","BrowserWindow","win","createWindow","width","height","loadURL","__dirname","webContents","openDevTools","on","then","name","console","log","catch","err","process","platform","quit"],"mappings":";;AACA;;;;;;eAD6BA,QAAQ,UAAR,C;IAAtBC,G,YAAAA,G;IAAKC,a,YAAAA,a;;AAGZ;AACA;AACA,IAAIC,YAAJ;;AAEA,SAASC,YAAT,GAAwB;AACtB;AACAD,QAAM,IAAID,aAAJ,CAAkB,EAAEG,OAAO,GAAT,EAAcC,QAAQ,GAAtB,EAAlB,CAAN;;AAEA;AACAH,MAAII,OAAJ,CAAY,YAAYC,SAAZ,GAAwB,aAApC;;AAEA;AACAL,MAAIM,WAAJ,CAAgBC,YAAhB;;AAEA;AACAP,MAAIQ,EAAJ,CAAO,QAAP,EAAiB,YAAY;AAC3B;AACA;AACA;AACAR,UAAM,IAAN;AACD,GALD;AAMD;;AAED;AACA;AACA;AACAF,IAAIU,EAAJ,CAAO,OAAP,EAAgBP,YAAhB;;AAEA;AACA;;AAEA,2FACGQ,IADH,CACQ,UAACC,IAAD;AAAA,SAAUC,QAAQC,GAAR,wBAAiCF,IAAjC,CAAV;AAAA,CADR,EAEGG,KAFH,CAES,UAACC,GAAD;AAAA,SAASH,QAAQC,GAAR,CAAY,qBAAZ,EAAmCE,GAAnC,CAAT;AAAA,CAFT;;AAIA;;AAEA;AACAhB,IAAIU,EAAJ,CAAO,mBAAP,EAA4B,YAAY;AACtC;AACA;AACA,MAAIO,QAAQC,QAAR,KAAqB,QAAzB,EAAmC;AACjClB,QAAImB,IAAJ;AACD;AACF,CAND;;AAQAnB,IAAIU,EAAJ,CAAO,UAAP,EAAmB,YAAY;AAC7B;AACA;AACA,MAAIR,QAAQ,IAAZ,EAAkB;AAChBC;AACD;AACF,CAND;;AAQA","file":"main.js","sourcesContent":["const {app, BrowserWindow} = require(\"electron\");\r\nimport installExtension, { REACT_DEVELOPER_TOOLS } from \"electron-devtools-installer\";\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet win;\r\n\r\nfunction createWindow() {\r\n  // Create the browser window.\r\n  win = new BrowserWindow({ width: 800, height: 600 });\r\n\r\n  // and load the index.html of the app.\r\n  win.loadURL(\"file://\" + __dirname + \"/index.html\");\r\n\r\n  // Open the DevTools.\r\n  win.webContents.openDevTools();\r\n\r\n  // Emitted when the window is closed.\r\n  win.on(\"closed\", function () {\r\n    // Dereference the window object, usually you would store windows\r\n    // in an array if your app supports multi windows, this is the time\r\n    // when you should delete the corresponding element.\r\n    win = null;\r\n  });\r\n}\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on(\"ready\", createWindow);\r\n\r\n// Call the developer tools (commented out, uncomment if you wish to use)\r\n/* eslint-disable no-console */\r\n\r\ninstallExtension(REACT_DEVELOPER_TOOLS)\r\n  .then((name) => console.log(`Added Extension:  ${name}`))\r\n  .catch((err) => console.log('An error occurred: ', err));\r\n\r\n/* eslint-enable no-console */\r\n\r\n// Quit when all windows are closed.\r\napp.on(\"window-all-closed\", function () {\r\n  // On macOS it is common for applications and their menu bar\r\n  // to stay active until the user quits explicitly with Cmd + Q\r\n  if (process.platform !== \"darwin\") {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", function () {\r\n  // On macOS it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (win === null) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n"]}