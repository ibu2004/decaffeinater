{"version":3,"sources":["index.js"],"names":["sleep","s","Promise","setTimeout","resolve","Index","props","state","time","process","countdown","hours","onStart","bind","i","JSON","parse","stringify","setState","send","margin","e","target","value","event","Component","render","document","getElementById"],"mappings":";;;;AAAA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;+eAL6C;AACA;;AAG7C;;;AAGA;AACA,SAASA,KAAT,CAAeC,CAAf,EAAkB;AAChB,SAAO,IAAIC,OAAJ,CAAY;AAAA,WAAWC,WAAWC,OAAX,EAAoBH,IAAE,IAAtB,CAAX;AAAA,GAAZ,CAAP;AACD;;AAED;;IACMI,K;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAGjB;AAHiB,8GACXA,KADW;;AAIjB,UAAKC,KAAL,GAAa;AACXC,YAAM,CADK;AAEXC,eAAS,EAFE;AAGXC,iBAAW,CAHA;AAIXC,aAAO;AAJI,KAAb;;AAOA;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf;AAZiB;AAalB;;AAED;;;;;;;;;;;;AAEE;AACIC,iB,GAAI,C;AACR;;AACIN,oB,GAAO,KAAKD,KAAL,CAAWC,IAAX,GAAgB,EAAhB,GAAqBA,KAAKD,KAAL,CAAWI,KAAX,GAAiB,I;AAC7CF,uB,GAAUM,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAe,KAAKV,KAApB,CAAX,EAAuCE,O;AACrD;;AACKK,oBAAI,C;;;sBAAGA,IAAI,KAAKP,KAAL,CAAWC,IAAX,GAAgB,E;;;;;;uBACxBR,MAAM,CAAN,C;;;AACN,qBAAKkB,QAAL,CAAc,EAACR,WAAW,KAAKH,KAAL,CAAWG,SAAX,GAAqB,CAAjC,EAAd;;;AAFkCI,mB;;;;;AAIpC,sCAAYK,IAAZ,CAAiB,WAAjB,EAA8BV,OAA9B,E,CAA4C;AAC5C,qBAAKS,QAAL,CAAc,EAACR,WAAW,CAAZ,EAAd,E,CAAwC;;;;;;;;;;;;;;;;;AAG1C;;;;6BACS;AAAA;;AACP,aACE;AAAA;AAAA,UAAS,OAAO,EAACU,QAAQ,MAAT,EAAhB,EAAkC,YAAlC;AACE;AACE,iBAAM,iBADR;AAEE,gBAAK,QAFP,EAEgB,WAFhB;AAGE,uBAAY,yCAHd;AAIE,oBAAU,kBAACC,CAAD;AAAA,mBAAO,OAAKH,QAAL,CAAc,EAACP,OAAOU,EAAEC,MAAF,CAASC,KAAjB,EAAd,CAAP;AAAA,WAJZ,GADF;AAME;AACE,iBAAM,mBADR;AAEE,gBAAK,QAFP,EAEgB,WAFhB;AAGE,uBAAY,2CAHd;AAIE,oBAAU,kBAACC,KAAD;AAAA,mBAAW,OAAKN,QAAL,CAAc,EAACV,MAAMgB,MAAMF,MAAN,CAAaC,KAApB,EAAd,CAAX;AAAA,WAJZ,GANF;AAWE;AACE,iBAAM,SADR;AAEE,gBAAK,MAFP,EAEc,WAFd;AAGE,uBAAY,qCAHd;AAIE,oBAAU,kBAACC,KAAD;AAAA,mBAAW,OAAKN,QAAL,CAAc,EAACT,SAASe,MAAMF,MAAN,CAAaC,KAAvB,EAAd,CAAX;AAAA,WAJZ,GAXF;AAgBE,iDAhBF;AAiBE,iEAAQ,SAAS,KAAKX,OAAtB,EAA+B,SAAQ,gBAAvC,EAAwD,cAAxD,EAAiE,WAAjE,EAAuE,OAAM,OAA7E,GAjBF;AAkBE,iDAlBF;AAmBE,kDAnBF;AAoBE;AAAA;AAAA,YAAU,OAAO,KAAKL,KAAL,CAAWG,SAA5B,EAAuC,OAAO,KAAKH,KAAL,CAAWC,IAAX,GAAgB,EAAhB,GAAmB,KAAKD,KAAL,CAAWI,KAAX,GAAiB,IAAlF,EAAwF,gBAAxF,EAAmG,iBAAnG;AACC,mBAAM,MADP;AAAA;AACqC,eAAKJ,KAAL,CAAWC,IAAX,GAAgB,EAAhB,GAAmB,KAAKD,KAAL,CAAWI,KAAX,GAAiB,IAArC,GAA2C,KAAKJ,KAAL,CAAWG,SAD1F;AAAA;AAC2H,eAAKH,KAAL,CAAWC,IAAX,GAAgB,EAD3I;AAAA;AAAA;AApBF,OADF;AAyBD;;;;EA3DiB,gBAAMiB,S;;AA8D1B;;;AACA,mBAASC,MAAT,CAAgB,8BAAC,KAAD,OAAhB,EAA2BC,SAASC,cAAT,CAAwB,KAAxB,CAA3B","file":"index.js","sourcesContent":["import \"babel-polyfill\";                     // polyfill to use async/await.\r\nimport {ipcRenderer} from \"electron\";        // ipc communication to main process.\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// Following imports for semantic-ui, awsm CSS framework :D\r\nimport {Button, Input, Progress, Segment} from \"semantic-ui-react\";\r\n\r\n// sleep function to wait for some time.\r\nfunction sleep(s) {\r\n  return new Promise(resolve => setTimeout(resolve, s*1000));\r\n}\r\n\r\n// Our main React component (and only one)\r\nclass Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Set up initial configuration for state.\r\n    this.state = {\r\n      time: 0,\r\n      process: \"\",\r\n      countdown: 0,\r\n      hours: 0\r\n    };\r\n\r\n    // Bind functions here.\r\n    this.onStart = this.onStart.bind(this);\r\n  }\r\n\r\n  // click handler to start the countdown till process terminates.\r\n  async onStart() {\r\n    // initial variables here.\r\n    let i = 0;\r\n    // following 2 lines prevents user from tampering state during countdown. \r\n    let time = this.state.time*60 + time.state.hours*3600;\r\n    let process = JSON.parse(JSON.stringify(this.state)).process;\r\n    // wait 1 second, then add 1 to this.state.countdown for (time) times.\r\n    for (i = 0; i < this.state.time*60; i++) {\r\n      await sleep(1);\r\n      this.setState({countdown: this.state.countdown+1});\r\n    }\r\n    ipcRenderer.send(\"iCanKill?\", process);     // send ipc message to main proc to kill process.\r\n    this.setState({countdown: 0});          // reset countdown :D\r\n  }\r\n\r\n  // This function is big, but it's 90% styling, nothing of interest here.\r\n  render() {\r\n    return (\r\n      <Segment style={{margin: \"12px\"}} raised>\r\n        <Input\r\n          label=\"Time (in hours)\"\r\n          type=\"number\" fluid\r\n          placeholder=\"Insert amount of time to play in hours.\"\r\n          onChange={(e) => this.setState({hours: e.target.value})} />\r\n        <Input\r\n          label=\"Time (in minutes)\"\r\n          type=\"number\" fluid\r\n          placeholder=\"Insert amount of time to play in minutes.\"\r\n          onChange={(event) => this.setState({time: event.target.value})} />\r\n        <Input\r\n          label=\"Process\"\r\n          type=\"text\" fluid\r\n          placeholder=\"Insert the process name of the app.\"\r\n          onChange={(event) => this.setState({process: event.target.value})} />\r\n        <br />\r\n        <Button onClick={this.onStart} content=\"Click to start\" inverted fluid color=\"green\" />\r\n        <br />\r\n        <div></div>\r\n        <Progress value={this.state.countdown} total={this.state.time*60+this.state.hours*3600} indicating autoSuccess\r\n         color=\"teal\">Time left to finish: {(this.state.time*60+this.state.hours*3600)-this.state.countdown} seconds left, out of {this.state.time*60} seconds.</Progress>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\n// Render final app to the screen :D\r\nReactDOM.render(<Index />, document.getElementById(\"app\"));"]}