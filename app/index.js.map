{"version":3,"sources":["index.js"],"names":["killProcess","pid","send","sleep","s","Promise","setTimeout","resolve","Index","props","state","time","process","countdown","onStart","bind","i","JSON","parse","stringify","setState","e","target","value","event","Component","render","document","getElementById"],"mappings":";;;;AAAA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;+eAL6C;AACA;;AAG7C;;;AAGA;AACA,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACxB,wBAAYC,IAAZ,CAAiB,WAAjB,EAA8BD,GAA9B;AACD;;AAED;AACA,SAASE,KAAT,CAAeC,CAAf,EAAkB;AAChB,SAAO,IAAIC,OAAJ,CAAY;AAAA,WAAWC,WAAWC,OAAX,EAAoBH,IAAE,IAAtB,CAAX;AAAA,GAAZ,CAAP;AACD;;AAED;;IACMI,K;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAGjB;AAHiB,8GACXA,KADW;;AAIjB,UAAKC,KAAL,GAAa;AACXC,YAAM,CADK;AAEXC,eAAS,EAFE;AAGXC,iBAAW;AAHA,KAAb;;AAMA;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf;AAXiB;AAYlB;;AAED;;;;;;;;;;;;AAEE;AACIC,iB,GAAI,C;AACR;;AACIL,oB,GAAO,KAAKD,KAAL,CAAWC,IAAX,GAAgB,E;AACvBC,uB,GAAUK,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAe,KAAKT,KAApB,CAAX,EAAuCE,O;AACrD;;AACKI,oBAAI,C;;;sBAAGA,IAAI,KAAKN,KAAL,CAAWC,IAAX,GAAgB,E;;;;;;uBACxBR,MAAM,CAAN,C;;;AACN,qBAAKiB,QAAL,CAAc,EAACP,WAAW,KAAKH,KAAL,CAAWG,SAAX,GAAqB,CAAjC,EAAd;;;AAFkCG,mB;;;;;AAIpChB,4BAAYY,OAAZ,E,CAAsC;AACtC,qBAAKQ,QAAL,CAAc,EAACP,WAAW,CAAZ,EAAd,E,CAAsC;;;;;;;;;;;;;;;;;AAGxC;;;;6BACS;AAAA;;AACP,aACE;AAAA;AAAA;AACE;AACE,iBAAM,mBADR;AAEE,gBAAK,QAFP,EAEgB,WAFhB;AAGE,uBAAY,gCAHd;AAIE,oBAAU,kBAACQ,CAAD;AAAA,mBAAO,OAAKD,QAAL,CAAc,EAACT,MAAMU,EAAEC,MAAF,CAASC,KAAhB,EAAd,CAAP;AAAA,WAJZ,GADF;AAME;AACE,iBAAM,SADR;AAEE,gBAAK,MAFP,EAEc,WAFd;AAGE,uBAAY,qCAHd;AAIE,oBAAU,kBAACC,KAAD;AAAA,mBAAW,OAAKJ,QAAL,CAAc,EAACR,SAASY,MAAMF,MAAN,CAAaC,KAAvB,EAAd,CAAX;AAAA,WAJZ,GANF;AAWE,iDAXF;AAYE,iEAAQ,SAAS,KAAKT,OAAtB,EAA+B,SAAQ,gBAAvC,EAAwD,cAAxD,EAAiE,WAAjE,EAAuE,OAAM,OAA7E,GAZF;AAaE,iDAbF;AAcE;AAAA;AAAA;AAAA;AAA2B,eAAKJ,KAAL,CAAWC,IAAX,GAAgB,EAAhB,GAAmB,KAAKD,KAAL,CAAWG,SAAzD;AAAA;AAA0F,eAAKH,KAAL,CAAWC,IAAX,GAAgB,EAA1G;AAAA;AAAA,SAdF;AAeE,mEAAU,OAAO,KAAKD,KAAL,CAAWG,SAA5B,EAAuC,gBAAvC,EAAkD,OAAO,KAAKH,KAAL,CAAWC,IAAX,GAAgB,EAAzE,GAfF;AAAA;AAAA,OADF;AAmBD;;;;EApDiB,gBAAMc,S;;AAuD1B;;;AACA,mBAASC,MAAT,CAAgB,8BAAC,KAAD,OAAhB,EAA2BC,SAASC,cAAT,CAAwB,KAAxB,CAA3B","file":"index.js","sourcesContent":["import \"babel-polyfill\";                     // polyfill to use async/await.\r\nimport {ipcRenderer} from \"electron\";        // ipc communication to main process.\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// Following imports for semantic ui, awsm CSS framework :D\r\nimport {Button, Input, Progress} from \"semantic-ui-react\";\r\n\r\n// Sends ipc message to main process to kill app when called.\r\nfunction killProcess(pid) {\r\n  ipcRenderer.send(\"iCanKill?\", pid);\r\n}\r\n\r\n// sleep function to wait for some time.\r\nfunction sleep(s) {\r\n  return new Promise(resolve => setTimeout(resolve, s*1000));\r\n}\r\n\r\n// Our main React component (and only one)\r\nclass Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Set up initial configuration for state.\r\n    this.state = {\r\n      time: 0,\r\n      process: \"\",\r\n      countdown: 0\r\n    };\r\n\r\n    // Bind functions here.\r\n    this.onStart = this.onStart.bind(this);\r\n  }\r\n\r\n  // click handler to start the countdown till process terminates.\r\n  async onStart() {\r\n    // initial variables here.\r\n    let i = 0;\r\n    // following 2 lines prevents user from tampering state during countdown. \r\n    let time = this.state.time*60;\r\n    let process = JSON.parse(JSON.stringify(this.state)).process;\r\n    // wait 1 second, then add 1 to this.state.countdown for (time) times.\r\n    for (i = 0; i < this.state.time*60; i++) {\r\n      await sleep(1);\r\n      this.setState({countdown: this.state.countdown+1});\r\n    }\r\n    killProcess(process);                 // send ipc message to main proc to kill process.\r\n    this.setState({countdown: 0});        // reset countdown :D\r\n  }\r\n\r\n  // This function is big, but it's 90% styling, nothing of interest here.\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Input\r\n          label=\"Time (in minutes)\"\r\n          type=\"number\" fluid\r\n          placeholder=\"Insert amount of time to play.\"\r\n          onChange={(e) => this.setState({time: e.target.value})} />\r\n        <Input\r\n          label=\"Process\"\r\n          type=\"text\" fluid\r\n          placeholder=\"Insert the process name of the app.\"\r\n          onChange={(event) => this.setState({process: event.target.value})} />\r\n        <br />\r\n        <Button onClick={this.onStart} content=\"Click to start\" inverted fluid color=\"green\" />\r\n        <br />\r\n        <div>Time left to finish: {this.state.time*60-this.state.countdown} seconds left, out of {this.state.time*60} seconds.</div>\r\n        <Progress value={this.state.countdown} indicating total={this.state.time*60} />>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Render final app to the screen :D\r\nReactDOM.render(<Index />, document.getElementById(\"app\"));"]}