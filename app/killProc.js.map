{"version":3,"sources":["killProc.js"],"names":["killProcUnix","killProcWin","killProcess","exec","require","pid","error","stdout","stderr","console","proc","platform"],"mappings":";;;;;QAIgBA,Y,GAAAA,Y;QAWAC,W,GAAAA,W;kBAYQC,W;AA3BxB,IAAMC,OAAOC,QAAQ,eAAR,EAAyBD,IAAtC,C,CAAiD;AACjD;;AAEA;AACO,SAASH,YAAT,CAAsBK,GAAtB,EAA2B;AAChCF,uBAAmBE,GAAnB,EAA0B,UAACC,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;AACnD,QAAIF,KAAJ,EAAW;AACTG,cAAQH,KAAR,0BAAqCA,KAArC;AACD,KAFD,MAEO;AACL,aAAO,EAAEC,QAAQA,MAAV,EAAkBC,QAAQA,MAA1B,EAAP;AACD;AACF,GAND;AAOD;;AAED;AACO,SAASP,WAAT,CAAqBI,GAArB,EAA0B;AAC/BF,yBAAqBE,GAArB,UAA+B,UAACC,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;AACxD,QAAIF,KAAJ,EAAW;AACTG,cAAQH,KAAR,0BAAqCA,KAArC;AACD,KAFD,MAEO;AACL,aAAO,EAAEC,QAAQA,MAAV,EAAkBC,QAAQA,MAA1B,EAAP;AACD;AACF,GAND;AAOD;;AAED;AACA;AACe,SAASN,WAAT,CAAqBQ,IAArB,EAA2BC,QAA3B,EAAqC;AAClD,MAAIA,aAAa,OAAjB,EAA0B;AACxBX,iBAAaU,IAAb;AACD,GAFD,MAEO;AACLT,gBAAYS,IAAZ;AACD;AACF","file":"killProc.js","sourcesContent":["const exec = require(\"child_process\").exec;      // needed to run cmd commands.\r\n/* eslint-disable no-console */\r\n\r\n// Kill processes in Unix.\r\nexport function killProcUnix(pid) {\r\n  exec(`killall -9 ${pid}`, (error, stdout, stderr) => {\r\n    if (error) {\r\n      console.error(`Failure to execute: ${error}`);\r\n    } else {\r\n      return { stdout: stdout, stderr: stderr};\r\n    }\r\n  });\r\n}\r\n\r\n// Kill processes in Windows.\r\nexport function killProcWin(pid) {\r\n  exec(`taskkill /IM ${pid} /F`, (error, stdout, stderr) => {\r\n    if (error) {\r\n      console.error(`Failure to execute: ${error}`);\r\n    } else {\r\n      return { stdout: stdout, stderr: stderr};\r\n    }\r\n  });\r\n}\r\n\r\n// Takes any parameter, detects the current platform\r\n// and then executes correct func to kill proc.\r\nexport default function killProcess(proc, platform) {\r\n  if (platform !== \"win32\") {\r\n    killProcUnix(proc);\r\n  } else {\r\n    killProcWin(proc);\r\n  }\r\n}"]}